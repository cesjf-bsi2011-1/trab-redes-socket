package com.auadottoni.socket.client;

import com.auadottoni.socket.server.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

public class ClientFrame extends javax.swing.JFrame {

    /**
     * Creates new form ServerFrame
     */
    public ClientFrame() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CLIENT");

        userTextField.setEditable(false);
        userTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTextFieldActionPerformed(evt);
            }
        });

        chatTextArea.setEditable(false);
        chatTextArea.setColumns(20);
        chatTextArea.setRows(5);
        jScrollPane1.setViewportView(chatTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(userTextField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTextFieldActionPerformed
        try {
            sendMessage(evt.getActionCommand());
            userTextField.setText("");
        } catch (IOException ex) {
            showMessage(ex.getMessage());
        }
    }//GEN-LAST:event_userTextFieldActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField userTextField;
    // End of variables declaration//GEN-END:variables

    private Socket client;
    private ObjectOutputStream output;
    private ObjectInputStream input;
    
    /**
     * Passo 1: Criação de um Socket e conecta-se ao servidor
     * Passo 2: Obtenção de fluxos de E/S do Socket
     * Passo 3: Realização do processamento
     * Passo 4: Fechamento da conexão
     */
    public void runClient() {
        try {
            //Conectando ao Servidor
            connectToServer();
            //Obtendo fluxos de E/S do Socket
            getStream();
            //Realizando o processamento
            whileChatting(); 
         } catch(EOFException eofException) {
             showMessage(eofException.getMessage());
         } catch (ClassNotFoundException ex) {
             showMessage(ex.getMessage());
         } catch (IOException ex) {
            showMessage(ex.getMessage());
        } finally {
            try {
                //Fechando a conexão
                closeStreamsSockets();
            } catch (IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
         }    }

    /**
     * Criando um socket e conectando-se ao servidor
     * @throws IOException 
     */
    private void connectToServer() throws IOException {
        client = new Socket(InetAddress.getByName("127.0.0.1"), 5555);
        showMessage("Você se conectou ao :" + client.getInetAddress().getHostName());
        ableToType(true);
    }

    /**
     * Obtendo fluxos de E/S do Socket
     * @throws IOException 
     */
    private void getStream() throws IOException {
       output = new ObjectOutputStream(client.getOutputStream());
       output.flush();
       input = new ObjectInputStream(client.getInputStream());
    }
    
    /**
     * Capturando as mensagens
     * @throws IOException
     * @throws ClassNotFoundException 
     */
    private void whileChatting() throws IOException, ClassNotFoundException {
        String messageReceived;
        do {
            messageReceived = (String) input.readObject();
            showMessage(client.getInetAddress().getHostName() + ": " 
                    + messageReceived + "\n");
        } while(!messageReceived.equals("SERVER_END"));
    }
    
    /**
     * Enviando mensagem no chat
     * @param actionCommand 
     */
    private void sendMessage(String message) throws IOException {
        showMessage("Você: " + message);
        output.writeObject(message);
        output.flush();
    }

    /**
     * Exibindo mensagem
     * @param message 
     */
    private void showMessage(String message) {
        SwingUtilities.invokeLater(
            new Runnable() {
                @Override
                public void run() {
                    chatTextArea.append(message + "\n");
                }
            }
        );
    }
    
    /**
     * Permitindo ou bloqueando que o usuário digite
     * @param isAble 
     */
    private void ableToType(boolean isAble) {
        SwingUtilities.invokeLater(
            new Runnable() {
                @Override
                public void run() {
                    userTextField.setEditable(isAble);
                }
            }
        );
    }
    
    /**
     * Fechando streams e sockets
     * @throws IOException 
     */
    private void closeStreamsSockets() throws IOException {
        showMessage("Encerrando conexões...");
        output.close();
        input.close();
        client.close();
        showMessage("Conexões encerradas.");
        ableToType(false);
    }
}
